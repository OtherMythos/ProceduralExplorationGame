#include "FacesToObjFile.h"
#include "Pipeline/VoxToFaces.h"
#include <fstream>
#include <vector>
#include <iomanip>

namespace VoxelConverterTool {

    struct Vector3 {
        float x, y, z;
    };

    struct Color {
        int r, g, b;
    };

    const Vector3 FACES_NORMALS[6] = {
        {0, -1,  0},
        {0,  1,  0},
        {0,  0, -1},
        {0,  0,  1},
        {1,  0,  0},
        {-1, 0,  0},
    };

    static const Color vals[] = {
        {255, 255, 255},
        {255, 255, 204},
        {255, 255, 153},
        {255, 255, 102},
        {255, 255, 51},
        {255, 255, 0},
        {255, 204, 255},
        {255, 204, 204},
        {255, 204, 153},
        {255, 204, 102},
        {255, 204, 51},
        {255, 204, 0},
        {255, 153, 255},
        {255, 153, 204},
        {255, 153, 153},
        {255, 153, 102},
        {255, 153, 51},
        {255, 153, 0},
        {255, 102, 255},
        {255, 102, 204},
        {255, 102, 153},
        {255, 102, 102},
        {255, 102, 51},
        {255, 102, 0},
        {255, 51,  255},
        {255, 51,  204},
        {255, 51,  153},
        {255, 51,  102},
        {255, 51,  51},
        {255, 51,  0},
        {255, 0,   255},
        {255, 0,   204},
        {255, 0,   153},
        {255, 0,   102},
        {255, 0,   51},
        {255, 0,   0},
        {204, 255, 255},
        {204, 255, 204},
        {204, 255, 153},
        {204, 255, 102},
        {204, 255, 51},
        {204, 255, 0},
        {204, 204, 255},
        {204, 204, 204},
        {204, 204, 153},
        {204, 204, 102},
        {204, 204, 51},
        {204, 204, 0},
        {204, 153, 255},
        {204, 153, 204},
        {204, 153, 153},
        {204, 153, 102},
        {204, 153, 51},
        {204, 153, 0},
        {204, 102, 255},
        {204, 102, 204},
        {204, 102, 153},
        {204, 102, 102},
        {204, 102, 51},
        {204, 102, 0},
        {204, 51,  255},
        {204, 51,  204},
        {204, 51,  153},
        {204, 51,  102},
        {204, 51,  51},
        {204, 51,  0},
        {204, 0,   255},
        {204, 0,   204},
        {204, 0,   153},
        {204, 0,   102},
        {204, 0,   51},
        {204, 0,   0},
        {153, 255, 255},
        {153, 255, 204},
        {153, 255, 153},
        {153, 255, 102},
        {153, 255, 51},
        {153, 255, 0},
        {153, 204, 255},
        {153, 204, 204},
        {153, 204, 153},
        {153, 204, 102},
        {153, 204, 51},
        {153, 204, 0},
        {153, 153, 255},
        {153, 153, 204},
        {153, 153, 153},
        {153, 153, 102},
        {153, 153, 51},
        {153, 153, 0},
        {153, 102, 255},
        {153, 102, 204},
        {153, 102, 153},
        {153, 102, 102},
        {153, 102, 51},
        {153, 102, 0},
        {153, 51,  255},
        {153, 51,  204},
        {153, 51,  153},
        {153, 51,  102},
        {153, 51,  51},
        {153, 51,  0},
        {153, 0,   255},
        {153, 0,   204},
        {153, 0,   153},
        {153, 0,   102},
        {153, 0,   51},
        {153, 0,   0},
        {102, 255, 255},
        {102, 255, 204},
        {102, 255, 153},
        {102, 255, 102},
        {102, 255, 51},
        {102, 255, 0},
        {102, 204, 255},
        {102, 204, 204},
        {102, 204, 153},
        {102, 204, 102},
        {102, 204, 51},
        {102, 204, 0},
        {102, 153, 255},
        {102, 153, 204},
        {102, 153, 153},
        {102, 153, 102},
        {102, 153, 51},
        {102, 153, 0},
        {102, 102, 255},
        {102, 102, 204},
        {102, 102, 153},
        {102, 102, 102},
        {102, 102, 51},
        {102, 102, 0},
        {102, 51,  255},
        {102, 51,  204},
        {102, 51,  153},
        {102, 51,  102},
        {102, 51,  51},
        {102, 51,  0},
        {102, 0,   255},
        {102, 0,   204},
        {102, 0,   153},
        {102, 0,   102},
        {102, 0,   51},
        {102, 0,   0},
        {51,  255, 255},
        {51,  255, 204},
        {51,  255, 153},
        {51,  255, 102},
        {51,  255, 51},
        {51,  255, 0},
        {51,  204, 255},
        {51,  204, 204},
        {51,  204, 153},
        {51,  204, 102},
        {51,  204, 51},
        {51,  204, 0},
        {51,  153, 255},
        {51,  153, 204},
        {51,  153, 153},
        {51,  153, 102},
        {51,  153, 51},
        {51,  153, 0},
        {51,  102, 255},
        {51,  102, 204},
        {51,  102, 153},
        {51,  102, 102},
        {51,  102, 51},
        {51,  102, 0},
        {51,  51,  255},
        {51,  51,  204},
        {51,  51,  153},
        {51,  51,  102},
        {51,  51,  51},
        {51,  51,  0},
        {51,  0,   255},
        {51,  0,   204},
        {51,  0,   153},
        {51,  0,   102},
        {51,  0,   51},
        {51,  0,   0},
        {0,   255, 255},
        {0,   255, 204},
        {0,   255, 153},
        {0,   255, 102},
        {0,   255, 51},
        {0,   255, 0},
        {0,   204, 255},
        {0,   204, 204},
        {0,   204, 153},
        {0,   204, 102},
        {0,   204, 51},
        {0,   204, 0},
        {0,   153, 255},
        {0,   153, 204},
        {0,   153, 153},
        {0,   153, 102},
        {0,   153, 51},
        {0,   153, 0},
        {0,   102, 255},
        {0,   102, 204},
        {0,   102, 153},
        {0,   102, 102},
        {0,   102, 51},
        {0,   102, 0},
        {0,   51,  255},
        {0,   51,  204},
        {0,   51,  153},
        {0,   51,  102},
        {0,   51,  51},
        {0,   51,  0},
        {0,   0,   255},
        {0,   0,   204},
        {0,   0,   153},
        {0,   0,   102},
        {0,   0,   51},
        {238, 0,   0},
        {221, 0,   0},
        {187, 0,   0},
        {170, 0,   0},
        {136, 0,   0},
        {119, 0,   0},
        {85,  0,   0},
        {68,  0,   0},
        {34,  0,   0},
        {17,  0,   0},
        {0,   238, 0},
        {0,   221, 0},
        {0,   187, 0},
        {0,   170, 0},
        {0,   136, 0},
        {0,   119, 0},
        {0,   85,  0},
        {0,   68,  0},
        {0,   34,  0},
        {0,   17,  0},
        {0,   0,   238},
        {0,   0,   221},
        {0,   0,   187},
        {0,   0,   170},
        {0,   0,   136},
        {0,   0,   119},
        {0,   0,   85},
        {0,   0,   68},
        {0,   0,   34},
        {0,   0,   17},
        {238, 238, 238},
        {221, 221, 221},
        {187, 187, 187},
        {170, 170, 170},
        {136, 136, 136},
        {119, 119, 119},
        {85,  85,  85},
        {68,  68,  68},
        {34,  34,  34},
        {17,  17,  17},
        {0,   0,   0}
    };

    FacesToObjFile::FacesToObjFile() {}
    FacesToObjFile::~FacesToObjFile() {}

    void FacesToObjFile::writeToFile(const std::string& objFilePath, const OutputFaces& outFaces) {
        std::ofstream objStream(objFilePath);
        objStream << std::fixed << std::setprecision(6);
        writeMesh(objStream, outFaces);
    }

    void FacesToObjFile::writeMesh(std::ofstream& objStream, const OutputFaces& outFaces) {
        int vertexIndex = 1;
        int normalIndex = 1;

        static const uint32 FACES_VERTICES[] = {
            0, 1, 2, 3,
            5, 4, 7, 6,
            0, 4, 5, 1,
            2, 6, 7, 3,
            1, 5, 6, 2,
            0, 3, 7, 4
        };
        static const uint32 VERTICES_POSITIONS[] = {
            0, 0, 0,
            1, 0, 0,
            1, 0, 1,
            0, 0, 1,
            0, 1, 0,
            1, 1, 0,
            1, 1, 1,
            0, 1, 1
        };

        for (const WrappedFaceContainer& fd : outFaces.outFaces) {
            Vector3 normal = FACES_NORMALS[fd.faceMask];
            Color color = vals[fd.vox];
            float r = color.r / 255.0f;
            float g = color.g / 255.0f;
            float b = color.b / 255.0f;

            for (int i = 0; i < 4; i++) {
                uint32 fv = FACES_VERTICES[fd.faceMask * 4 + i] * 3;
                float xx = (VERTICES_POSITIONS[fv] * fd.sizeX + fd.x);
                float yy = (VERTICES_POSITIONS[fv + 1] * fd.sizeY + fd.y);
                float zz = (VERTICES_POSITIONS[fv + 2] * fd.sizeZ + fd.z);

                xx -= 128;
                yy -= 128;
                zz -= 128;

                objStream << "v " << xx << " " << yy << " " << zz << " " << r << " " << g << " " << b << "\n";
            }

            objStream << "vn " << normal.x << " " << normal.y << " " << normal.z << "\n";

            objStream << "f " << vertexIndex << "//" << normalIndex << " "
                      << (vertexIndex + 1) << "//" << normalIndex << " "
                      << (vertexIndex + 2) << "//" << normalIndex << " "
                      << (vertexIndex + 3) << "//" << normalIndex << "\n";

            vertexIndex += 4;
            normalIndex++;
        }
    }
}
