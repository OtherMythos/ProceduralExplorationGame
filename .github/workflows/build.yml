name: Build Resources

on:
  push:
    branches: 'master'

jobs:
  build:
    runs-on: ubuntu-20.04

    outputs:
      sha_short: ${{ steps.vars.outputs.sha_short }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Build
        run: |
          mkdir /tmp/distribution
          cp -r avSetup.cfg /tmp/distribution
          cp -r OgreResources.cfg /tmp/distribution
          cp -r src /tmp/distribution
          echo >> /tmp/distribution/src/Versions.nut
          echo "const GIT_HASH = \"${{ steps.vars.outputs.sha_short }}\"" >> /tmp/distribution/src/Versions.nut
          ./resBuild.sh --clean
          cp -r build /tmp/distribution
          chmod -R 777 /tmp/distribution
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: distribution-${{ steps.vars.outputs.sha_short }}
          path: /tmp/distribution

  buildWindows:
    runs-on: windows-2019
    needs: build

    steps:
      - name: Clone Build
        uses: dawidd6/action-download-artifact@v3
        with:
          name: avEngineWindows.zip
          repo: OtherMythos/avEngine
          workflow: buildWindows.yml
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: distribution-${{ needs.build.outputs.sha_short }}
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: buildWindows-${{ needs.build.outputs.sha_short }}
          path: ${{ github.workspace }}

  buildLinux:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Clone Build
        uses: dawidd6/action-download-artifact@v3
        with:
          name: av-x86_64.AppImage
          repo: OtherMythos/avEngine
          workflow: buildLinux.yml
      - name: Extract appimage
        run: |
          chmod +x ./av-x86_64.AppImage
          ./av-x86_64.AppImage --appimage-extract
          ls
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: distribution-${{ needs.build.outputs.sha_short }}
          path: squashfs-root/usr/bin
      - name: Setup appimage
        run: |
          #cd /tmp
          wget -O /usr/local/bin/appimagetool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x /usr/local/bin/appimagetool
          ls
          sudo apt update
          sudo apt install fuse libfuse2
          #./appimagetool-x86_64.AppImage --appimage-extract
          #cd squashfs-root/usr/bin
          #ls
          #cd /tmp
          appimagetool squashfs-root
          rm -rf squashfs-root
          mv av-x86_64.AppImage buildLinux-${{ needs.build.outputs.sha_short }}.AppImage
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: buildLinux-${{ needs.build.outputs.sha_short }}.AppImage
          path: ${{ github.workspace }}/buildLinux-${{ needs.build.outputs.sha_short }}.AppImage
