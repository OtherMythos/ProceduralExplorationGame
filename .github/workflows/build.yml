name: Build and Test

on:
  push:
    branches: ['master', 'plugin']

jobs:
  buildNativeLinux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Environment
        run: |
          sudo apt-get update && sudo apt-get install -y libxaw7-dev libxrandr-dev libxcb-randr0-dev libx11-dev xserver-xorg-dev xorg-dev libx11-xcb1 libxcb-res0-dev xcb libxcb-xkb-dev x11-xkb-utils libx11-xcb-dev libxkbcommon-x11-dev libgtk-3-dev
      - name: Download artifact
        uses: dawidd6/action-download-artifact@v3
        with:
          name: avBuiltLinux.tar.gz
          repo: OtherMythos/avBuild
          workflow: linux.yml
      - name: Expand artifact
        run: |
          tar -xvf build.tar.gz
      - name: Setup CMake
        run: |
          mkdir -p native/build
          cd native/build
          git clone --branch plugin https://github.com/OtherMythos/avEngine.git /tmp/avEngine
          cmake -DCMAKE_BUILD_TYPE=Debug -DENGINE_SOURCE_PATH=/tmp/avEngine -DAV_LIBS_DIR=${{ github.workspace }}/Debug ..
      - name: Build
        run: |
          cd native/build
          cmake --build .
          cp "plugin/libProceduralExplorationGamePlugin.so" "plugin/libProceduralExplorationGamePlugin_Debug-linux-x86_64.so"
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: libProceduralExplorationGamePlugin_Debug-linux-x86_64.so
          path: "native/build/plugin/libProceduralExplorationGamePlugin_Debug-linux-x86_64.so"

  buildNativeWindows:
    runs-on: windows-2019

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download artifact
        uses: dawidd6/action-download-artifact@v3
        with:
          name: avBuiltWindows-Debug.zip
          repo: OtherMythos/avBuild
          workflow: windows.yml
      - name: Download avCore artifact
        uses: dawidd6/action-download-artifact@v3
        with:
          name: avCore.lib
          repo: OtherMythos/avEngine
          workflow: buildWindows.yml
      - name: Expand artifact
        run: |
          Expand-Archive avBuilt-windows-Debug.zip .
      - name: Clone dependencies
        run: |
          git clone --branch plugin https://github.com/OtherMythos/avEngine.git D:/avEngine
          cd D:\avEngine
          mkdir build
          cd build
          mkdir Debug
          cd Debug
          cp ${{ github.workspace }}/avCore.lib .
      - name: Setup CMake
        run: |
          cd native
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Debug -DENGINE_SOURCE_PATH='D:\avEngine' -DAV_LIBS_DIR=${{ github.workspace }}/avBuilt/Debug ..
      - name: Build
        run: |
          cd native/build
          cmake --build .
          cp "plugin/Debug/ProceduralExplorationGamePlugin.dll" "plugin/Debug/ProceduralExplorationGamePlugin_Debug-windows-x86_64.dll"
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ProceduralExplorationGamePlugin_Debug-windows-x86_64.dll
          path: "native/build/plugin/Debug/ProceduralExplorationGamePlugin_Debug-windows-x86_64.dll"

  build:
    needs: ['buildNativeLinux', 'buildNativeWindows']
    runs-on: ubuntu-20.04

    outputs:
      sha_short: ${{ steps.vars.outputs.sha_short }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Setup plugins
        run: |
          mkdir plugins
      - name: Download Windows native plugin
        uses: actions/download-artifact@v4
        with:
          name: ProceduralExplorationGamePlugin_Debug-windows-x86_64.dll
          path: plugins/
      - name: Download Linux native plugin
        uses: actions/download-artifact@v4
        with:
          name: libProceduralExplorationGamePlugin_Debug-linux-x86_64.so
          path: plugins/
      - name: Build
        run: |
          mkdir /tmp/distribution
          cp -r avSetup.cfg /tmp/distribution
          cp -r OgreResources.cfg /tmp/distribution
          cp -r src /tmp/distribution
          cp -r plugins /tmp/distribution
          echo >> /tmp/distribution/src/Versions.h.nut
          echo "const GIT_HASH = \"${{ steps.vars.outputs.sha_short }}\"" >> /tmp/distribution/src/Versions.h.nut
          ./resBuild.sh --clean
          cp -r build /tmp/distribution
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: distribution-${{ steps.vars.outputs.sha_short }}
          path: /tmp/distribution

  buildWindows:
    runs-on: windows-2019
    needs: build

    steps:
      - name: Clone Build
        uses: dawidd6/action-download-artifact@v3
        with:
          name: avEngineWindows.zip
          repo: OtherMythos/avEngine
          workflow: buildWindows.yml
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: distribution-${{ needs.build.outputs.sha_short }}
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: buildWindows-${{ needs.build.outputs.sha_short }}
          path: ${{ github.workspace }}

  buildLinux:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Clone Build
        uses: dawidd6/action-download-artifact@v3
        with:
          name: av-x86_64.AppImage
          repo: OtherMythos/avEngine
          workflow: buildLinux.yml
      - name: Extract appimage
        run: |
          chmod +x ./av-x86_64.AppImage
          ./av-x86_64.AppImage --appimage-extract
          ls
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: distribution-${{ needs.build.outputs.sha_short }}
          path: squashfs-root/usr/bin
      - name: Setup appimage
        run: |
          #cd /tmp
          chmod -R 777 squashfs-root/usr/bin/build
          wget -O /usr/local/bin/appimagetool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x /usr/local/bin/appimagetool
          ls
          sudo apt update
          sudo apt install fuse libfuse2
          #./appimagetool-x86_64.AppImage --appimage-extract
          #cd squashfs-root/usr/bin
          #ls
          #cd /tmp
          appimagetool squashfs-root
          rm -rf squashfs-root
          mv av-x86_64.AppImage buildLinux-${{ needs.build.outputs.sha_short }}.AppImage
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: buildLinux-${{ needs.build.outputs.sha_short }}.AppImage
          path: ${{ github.workspace }}/buildLinux-${{ needs.build.outputs.sha_short }}.AppImage

  runUnitTests:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      checks: write
      pull-requests: write

    steps:
      - name: Setup OpenGL
        run: |
          sudo apt update
          sudo apt install mesa-utils xvfb fuse libfuse2
      - name: Clone Build
        uses: dawidd6/action-download-artifact@v3
        with:
          name: av-x86_64.AppImage
          repo: OtherMythos/avEngine
          workflow: buildLinux.yml
      - name: Checkout Game Code
        uses: actions/checkout@v4
        with:
          path: ./checkout
      - name: Checkout avTools
        uses: actions/checkout@v4
        with:
          path: ./avTools
          repository: OtherMythos/avTools
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: distribution-${{ needs.build.outputs.sha_short }}
      - name: Run tests
        run: |
          cp -r checkout/test .
          chmod +x ./av-x86_64.AppImage
          xvfb-run python avTools/testRunner/testRunner.py -e ./av-x86_64.AppImage -p test/avTests.cfg -o /home/runner/work/results.xml
      - name: Check results
        if: always()
        run: |
          pwd
          cp /home/runner/work/results.xml .
          ls
          cat results.xml
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            results.xml