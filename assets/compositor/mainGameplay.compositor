
//TODO figure out the correct shadows
/*
compositor_node_shadow SR3_Shadows
{
    technique pssm

    //**  shadows par
    // texture atlas 3072 2048 PFG_D32_FLOAT  // medium 2k
    // texture atlas 6144 4096 PFG_D32_FLOAT  // high 4k
    texture atlas 12288 8192 PFG_D32_FLOAT  // ultra high 8k

    num_splits        3
    pssm_lambda        0.95
    shadow_map 0 atlas uv 0.000000000000000 0.0 0.666666666666667 1.0 light 0 split 0
    shadow_map 1 atlas uv 0.666666666666667 0.0 0.333333333333333 0.5 light 0 split 1
    shadow_map 2 atlas uv 0.666666666666667 0.5 0.333333333333333 0.5 light 0 split 2

    target atlas
    {
        pass clear
        {
            colour_value 1 1 1 1
            identifier    77000
        }
    }

    shadow_map_target_type directional
    {
        shadow_map 0 1 2
        {
            pass render_scene
            {
                profiling_id "Shadows ed prv"
                identifier    77077

                rq_last        219
            }
        }
    }
}

compositor_node_shadow default_simpleShadowNode
{
    technique pssm

    texture pssm0 2048 2048 PFG_D32_FLOAT
    texture pssm1 1024 1024 PFG_D32_FLOAT
    texture pssm2 1024 1024 PFG_D32_FLOAT

    num_splits      3
    pssm_lambda     0.95
    //Render 1st closest light, splits 0 1 & 2
    shadow_map 0 pssm0 light 0 split 0
    shadow_map 1 pssm1 light 0 split 1
    shadow_map 2 pssm2 light 0 split 2

    shadow_map_target_type directional
    {
        //Render shadow maps 0, 1 and 2.
        //Can only be used by directional lights.
        shadow_map 0 1 2
        {
            pass clear
            {
                colour_value 1 1 1 1
            }
            pass render_scene
            {
            }
        }
    }
}
*/
compositor_node_shadow default_simpleShadowNode
{
    technique focused
    texture focusedTex 4096 4096 PFG_D32_FLOAT
    shadow_map 0 focusedTex light 0
    //Render shadow map "0"
    shadow_map_target_type directional spot
    {
        shadow_map 0
        {
            pass clear { colour_value 1 1 1 1 }
            pass render_scene
            {
                rq_first 10
                rq_last 40
            }
        }
    }
}
compositor_node renderMainGameplayNode
{
    in 0 renderTexture

    texture depthTextureDecorations    target_width target_height PFG_D32_FLOAT
    texture depthTextureGround    target_width target_height PFG_D32_FLOAT
    texture depthTextureHiddenTerrain    target_width target_height PFG_D32_FLOAT
    texture finalSceneDepth     target_width target_height PFG_D32_FLOAT

    texture sceneRenderDecorations    target_width target_height PFG_RGBA32_FLOAT
    texture sceneRender     target_width target_height PFG_RGBA32_FLOAT
    texture finalSceneRender     target_width target_height PFG_RGBA32_FLOAT
    texture sceneHiddenTerrain     target_width target_height PFG_RGBA32_FLOAT
    texture finalMask    target_width target_height PFG_RGBA32_FLOAT

    texture windTexture     target_width_scaled 0.5 target_height_scaled 0.5 PFG_RGBA32_FLOAT
    texture depthWind    target_width_scaled 0.5 target_height_scaled 0.5 PFG_D32_FLOAT
    texture finalWindTexture     target_width_scaled 0.5 target_height_scaled 0.5 PFG_RGBA32_FLOAT

    rtv sceneRenderDecorations
    {
        depth_stencil depthTextureDecorations
    }
    rtv sceneRender
    {
        depth_stencil depthTextureGround
    }
    rtv windTexture
    {
        depth_stencil depthWind
    }
    rtv sceneHiddenTerrain
    {
        depth_stencil depthTextureHiddenTerrain
    }

    target sceneRenderDecorations
    {
        pass render_scene
        {
            load
            {
                all                clear
                clear_colour    0 0 0 0
            }
            overlays    off

            identifier 12

            rq_first 15
            rq_last 16
        }
        pass render_scene
        {
            rq_first 60
        }
    }

    target sceneRender
    {
        pass render_scene
        {
            load
            {
                all clear
                clear_colour 0.5 0.89 1 1
            }
            store
            {
                all store_or_resolve
            }

            rq_first 10
            rq_last 30

            shadows default_simpleShadowNode
        }
        //Ensure particles are rendered
        pass render_scene
        {
            rq_first 80
        }
    }
    target sceneHiddenTerrain
    {
        pass clear{
            colour_value 0.1 0.1 1 1
        }
        pass render_scene
        {
            rq_first 41
            rq_last 42

            identifier 11
        }
    }

    target finalSceneRender{
        pass render_quad
        {
            material Postprocess/MergeTexturesByDepth
            input 0 sceneRender
            input 1 sceneHiddenTerrain
            input 2 depthTextureGround
            input 3 depthTextureHiddenTerrain
        }
    }

    //Determine the final mask
    target finalMask
    {
        pass clear
        {

        }
        pass render_quad
        {
            material Postprocess/MergeMask
            input 0 depthTextureGround
            input 1 depthTextureDecorations
            input 2 depthTextureHiddenTerrain
        }
    }

    target finalSceneDepth
    {
        pass clear
        {

        }
        pass render_quad
        {
            material Postprocess/MergeDepth
            input 0 depthTextureGround
            input 1 depthTextureDecorations
            input 2 depthTextureHiddenTerrain
        }
    }

    target windTexture
    {
        pass clear
        {
            colour_value 0 0 0 0
        }
        pass render_scene
        {
            rq_first 40
            rq_last 41
        }
    }

    target finalWindTexture
    {
        pass render_quad
        {
            material Postprocess/MergeDepthComplete
            input 0 finalSceneDepth
            input 1 depthWind
        }
    }

    target finalSceneRender{
        pass render_quad
        {
            material Postprocess/lowResCopy
            input 0 finalSceneRender
            input 1 finalWindTexture
        }
    }

    target sceneRenderDecorations{
        pass render_quad
        {
            material Postprocess/applyMask
            input 0 sceneRenderDecorations
            input 1 finalMask
        }
    }

    target renderTexture
    {
        pass clear
        {

        }
        pass render_quad
        {
            material Postprocess/OutlineDraw
            input 0 finalSceneRender
            input 1 finalMask
            input 2 sceneRenderDecorations
        }
    }
}

workspace mainGameplayRenderWorkspace
{
    connect_output renderMainGameplayNode 0
}