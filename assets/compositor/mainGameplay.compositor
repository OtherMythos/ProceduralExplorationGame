
//TODO figure out the correct shadows
/*
compositor_node_shadow SR3_Shadows
{
    technique pssm

    //**  shadows par
    // texture atlas 3072 2048 PFG_D32_FLOAT  // medium 2k
    // texture atlas 6144 4096 PFG_D32_FLOAT  // high 4k
    texture atlas 12288 8192 PFG_D32_FLOAT  // ultra high 8k

    num_splits        3
    pssm_lambda        0.95
    shadow_map 0 atlas uv 0.000000000000000 0.0 0.666666666666667 1.0 light 0 split 0
    shadow_map 1 atlas uv 0.666666666666667 0.0 0.333333333333333 0.5 light 0 split 1
    shadow_map 2 atlas uv 0.666666666666667 0.5 0.333333333333333 0.5 light 0 split 2

    target atlas
    {
        pass clear
        {
            colour_value 1 1 1 1
            identifier    77000
        }
    }

    shadow_map_target_type directional
    {
        shadow_map 0 1 2
        {
            pass render_scene
            {
                profiling_id "Shadows ed prv"
                identifier    77077

                rq_last        219
            }
        }
    }
}

compositor_node_shadow default_simpleShadowNode
{
    technique pssm

    texture pssm0 2048 2048 PFG_D32_FLOAT
    texture pssm1 1024 1024 PFG_D32_FLOAT
    texture pssm2 1024 1024 PFG_D32_FLOAT

    num_splits      3
    pssm_lambda     0.95
    //Render 1st closest light, splits 0 1 & 2
    shadow_map 0 pssm0 light 0 split 0
    shadow_map 1 pssm1 light 0 split 1
    shadow_map 2 pssm2 light 0 split 2

    shadow_map_target_type directional
    {
        //Render shadow maps 0, 1 and 2.
        //Can only be used by directional lights.
        shadow_map 0 1 2
        {
            pass clear
            {
                colour_value 1 1 1 1
            }
            pass render_scene
            {
            }
        }
    }
}
*/
compositor_node_shadow default_simpleShadowNode
{
    technique focused
    texture focusedTex 4096 4096 PFG_D32_FLOAT
    shadow_map 0 focusedTex light 0
    //Render shadow map "0"
    shadow_map_target_type directional spot
    {
        shadow_map 0
        {
            pass clear { colour_value 1 1 1 1 }
            pass render_scene
            {
                rq_first 10
                rq_last 40
            }
        }
    }
}
compositor_node renderMainGameplayNode
{
    in 0 renderTexture

    texture sceneRenderDecorations    target_width target_height PFG_RGBA32_FLOAT depth_pool 2
    texture finalSceneRender     target_width target_height PFG_RGBA32_FLOAT depth_pool 2
    texture windTexture     target_width_scaled 0.5 target_height_scaled 0.5 PFG_RGBA32_FLOAT

    target finalSceneRender
    {
        pass clear{
            colour_value 0.1 0.1 1 1
        }
        //Render invisible terrain
        pass render_scene
        {
            rq_first 41
            rq_last 42

            identifier 11
        }
        pass render_scene
        {
            rq_first 15
            rq_last 17

            shadows default_simpleShadowNode
        }
        //Ensure particles are rendered
        pass render_scene
        {
            rq_first 80
        }
        //Render discovered terrain
        pass render_scene
        {

			load { all dont_care }
			store
			{
				colour	dont_care
				depth	store
				stencil	dont_care
			}

            shadows default_simpleShadowNode

            rq_first 10
            rq_last 15
        }
        //Render water
        pass render_scene
        {
            rq_first 17
            rq_last 18
        }
        //Render effects without lines
        pass render_scene
        {
            rq_first 16
            rq_last 17
        }

        //Render the sky
        pass render_quad
        {
            material Postprocess/FillColour
        }
    }

    //Render just decorations (trees, houses, enemies) for the line drawing algorithm
    target sceneRenderDecorations
    {
        pass render_scene
        {
			load {
                colour clear
            }
			store
			{
				colour	store
				depth	dont_care
				stencil	dont_care
			}

            overlays    off

            identifier 12

            rq_first 15
            rq_last 15
        }
        //Render particles
        pass render_scene
        {
            rq_first 80

            identifier 12
        }
    }

    target windTexture
    {
        pass clear
        {
            colour_value 0 0 0 0
        }
        pass render_scene
        {
            rq_first 40
            rq_last 41
        }
    }

    target finalSceneRender{
        pass render_quad
        {
            material Postprocess/lowResCopy
            input 0 finalSceneRender
            input 1 windTexture
        }
    }

    target renderTexture
    {
        pass clear
        {

        }
        pass render_quad
        {
            material Postprocess/OutlineDraw
            input 0 finalSceneRender
            input 1 sceneRenderDecorations
        }
    }
}

workspace mainGameplayRenderWorkspace
{
    connect_output renderMainGameplayNode 0
}