@piece( custom_ps_preExecution )
/*
	#define material materialArray[inPs.materialId]

	@property( diffuse_map )
	if(material.userValue[0].x == 1.0){
			float2 animUV = inPs.uv@value(uv_diffuse);
			animUV.x = animUV.x + sin(material.userValue[0].y * 2) * 0.001;
			animUV.y = animUV.y + cos(material.userValue[0].y * 2) * 0.001;

			inPs.uv0.xy = animUV;
	}
	@end
*/
@end

@piece( custom_passBuffer )
	float time;
	float playerPositionX;
	float playerPositionY;
	float playerPositionZ;

	float customX;
	float customY;
	float customZ;
@end

@piece( custom_ps_preLights )
	pixelData.diffuse.xyz *= inPs.ambientVal;
@end

@piece( custom_ps_posExecution )
	//For debug purposes
	//outPs_colour0.xyz = float3(inPs.diffuse.xyz);

	@property(windStreaks)
		float startDist = 20.0;
		float lengthDist = 150.0;
		if(inPs.windDistance >= startDist){
			float distanceDiff = (lengthDist - clamp(float(inPs.windDistance - startDist), 0.0, lengthDist)) / lengthDist;
			outPs_colour0.xyz = float3(distanceDiff);
		}else{
			outPs_colour0.xyz = float3(1, 1, 1);
		}
	@else
		@property( !disableFog )
			float3 fogColour = float3(0.5, 0.89, 1);
			outPs_colour0.xyz = mix(fogColour, outPs_colour0.xyz, inPs.fog);
		@end
	@end

	@property( renderSceneDecorations )
		//float colVal = float(inPs.passDrawId % uint(100)) / 100.0;
		outPs_colour0.xyz = inPs.decorationColour;
		outPs_colour0.z = inPs.passDrawColour;
	@end

	@property(floorDecals)
		if(passBuf.customX > 0){
			float dist = distance(float2(passBuf.playerPositionX, passBuf.playerPositionZ), float2(inPs.worldPos.x, inPs.worldPos.z));
			float checkVal = 7;
			if(dist <= 20){
				if(dist <= checkVal){
					outPs_colour0.xyz = mix(outPs_colour0.xyz, float3(0, 0, 0), 0.3);
				}
				if(dist <= 20 && dist >= 20 - 0.5){
					outPs_colour0.xyz = mix(outPs_colour0.xyz, float3(1, 1, 1), 0.3);
				}
			}
		}
	@end
@end

@piece( custom_VStoPS )
	@property(floorDecals)
	float3 worldPos;
	@end
	@property( renderSceneDecorations )
		NO_INTERPOLATION_PREFIX float passDrawColour;
		float3 decorationColour;
	@else
		float fog;
		float ambientVal;
	@end
	@property( windStreaks )
		float windDistance;
	@end
@end

@piece( custom_vs_posExecution )

	@property( !hlms_shadowcaster || !hlms_shadow_uses_depth_texture || alpha_test || exponential_shadow_maps && !renderSceneDecorations)
	@property( !disableFog && !renderSceneDecorations )
		float3 playerPosition = float3(passBuf.playerPositionX, passBuf.playerPositionY, passBuf.playerPositionZ);
		//float4 positionRelativeToCam = mul(worldPos, passBuf.viewProj);
		//float dist = length(positionRelativeToCam.xyz);
		float4 worldDistance = float4(playerPosition, 1.0) - worldPos;
		float dist = length(worldDistance.xyz);
		//float4 playerFinalPos = mul(float4(passBuf.playerPosition, 1.0), passBuf.viewProj);
		//float dist = distance(playerFinalPos.xyz, outVs_Position.xyz);
		//float dist = distance(passBuf.playerPosition, worldPos.xyz);

		//Expnential fog
		/*
		float density = 0.003;
		float gradient = 1.5;
		float visibility = exp(-pow(dist * density, gradient));
		*/

		/*
		//Explonential Squared
		float density = 0.002;
		float visibility = exp(-pow(dist * density, 2.0));
		*/

		//Sigmoid fog
		float fogStart = 200.0;
		float fogEnd = 600.0;
		float visibility = smoothstep(fogEnd, fogStart, dist);

		visibility = clamp(visibility, 0.0, 1.0);
		outVs.fog = visibility;
	@end
		@property(floorDecals)
		outVs.worldPos = worldPos.xyz;
		@end
	@end

	@property( windStreaks )
		float4 positionRelativeToCam = mul(worldPos, passBuf.viewProj);
		float dist = length(positionRelativeToCam.xyz);
		outVs.windDistance = dist;
	@end

	@property( renderSceneDecorations )
		float colVal = float(finalDrawId % uint(100));
		float4 positionRelativeToCam = mul(worldPos, passBuf.viewProj);
		float dist = length(positionRelativeToCam.xyz);
		outVs.decorationColour = float3(1, dist, 0);
		outVs.passDrawColour = colVal;
	@end

@end

@piece( custom_vs_preExecution )

	@property(packedVoxels)

		@property(!renderSceneDecorations)
		@insertpiece(voxelData)
		@end

		float4 inValues = inVs_vertex;
		@property( syntax == metal )
			uint original = as_type<uint>(inValues.x);
			uint originalSecond = as_type<uint>(inValues.y);
		@else
			uint original = floatBitsToUint(inValues.x);
			uint originalSecond = floatBitsToUint(inValues.y);
		@end

		float3 normVal = float3(0, 0, 0);
		#undef inVs_normal
		#define inVs_normal normVal

		#undef inVs_vertex
		#define inVs_vertex inValues

		uint voxValue = originalSecond & uint(0xFF);
		uint voxFlags = (originalSecond >> 16) & uint(0xFF);

		@property(!renderSceneDecorations)
		const uint COLS_WIDTH = uint(16);
		const uint COLS_HEIGHT = uint(16);
		const float TILE_WIDTH = (1.0 / COLS_WIDTH) / 2.0;
		const float TILE_HEIGHT = (1.0 / COLS_HEIGHT) / 2.0;
		const float texCoordX = (float(voxValue % COLS_WIDTH) / COLS_WIDTH) + TILE_WIDTH;
		const float texCoordY = (float((uint(float(voxValue) / COLS_WIDTH))) / COLS_HEIGHT) + TILE_HEIGHT;
		const float2 testVal = float2(texCoordX, texCoordY);
		@else
		const float2 testVal = float2(0, 0);
		@end

		//float2 testVal = VOXEL_TEX_COORDS[voxValue];
		#undef inVs_uv0
		#define inVs_uv0 testVal

		int pos_x = int(original & uint(0x3FF));
		int pos_y = int((original >> 10) & uint(0x3FF));
		int pos_z = int((original >> 20) & uint(0x3FF));
		@property(offlineVoxels)
			pos_x -= 128;
			pos_y -= 128;
			pos_z -= 128;
		@end

		inValues.x = float(pos_x)-0.5;
		inValues.y = float(pos_y)-0.5;
		inValues.z = float(pos_z)-0.5;
		@property(voxelTerrain)
			inValues.z -= 4.0;
		@end

		uint norm = uint((originalSecond >> 29) & uint(0x7));
		uint ambient = uint((original >> 30) & uint(0x3));

		@property(treeVertices)
			@property( !hlms_shadowcaster || !hlms_shadow_uses_depth_texture || alpha_test || exponential_shadow_maps )
				uint voxel = ((originalSecond >> 8) & uint(0x3));
				float mod = float(voxel) / 3;
				inValues.y += sin(inValues.y*600 + passBuf.time) * 0.05 * mod;
				inValues.z += cos(inValues.z*600 + passBuf.time) * 0.10 * mod;
				inValues.x += sin(inValues.x*600 + passBuf.time) * 0.05 * mod;
			@end
		@end

		@property(!invisibleTerrain && voxelTerrain)
			//Hide voxels only if the terrain is not in the invisible state.
			uint test = voxFlags & uint(0x1);
			if(test > uint(0)){
				inValues.y = -100000.0;
			}
		@end

		@property(!renderSceneDecorations)
		normVal = FACES_NORMALS[norm];

		//If the renderable does not require pixel shading because it is a shadow caster for instance, these settings won't always be available.
		@property( !hlms_shadowcaster || !hlms_shadow_uses_depth_texture || alpha_test || exponential_shadow_maps )
			outVs.ambientVal = float(ambient)/3;
		@end
		@end

	@else
		float4 inValues = inVs_vertex;
		#undef inVs_vertex
		#define inVs_vertex inValues

		@property( !hlms_shadowcaster || !hlms_shadow_uses_depth_texture || alpha_test || exponential_shadow_maps )
			outVs.ambientVal = 1.0;
		@end

		@property(oceanVertices)
			float animFlag = inVs_vertex.y;
			float animMod = 1.0 - animFlag;
			inVs_vertex.y += sin(inVs_vertex.x*600 + passBuf.time) * 0.25 * animMod;
			inVs_vertex.y = 0.0;
			inVs_vertex.y += cos(inVs_vertex.z*600 + passBuf.time) * 0.25 * animMod;
			inVs_vertex.x += sin(inVs_vertex.x*600 + passBuf.time) * 0.001 * animMod;
		@end

		@property(windStreaks)
			inVs_vertex.y += sin(inVs_vertex.z*10 + passBuf.time) * 0.75;
			inVs_vertex.x += sin(inVs_vertex.z*3 + passBuf.time * 4) * 2.75;
		@end
	@end


@end

