@piece( custom_ps_preExecution )
/*
	#define material materialArray[inPs.materialId]

	@property( diffuse_map )
	if(material.userValue[0].x == 1.0){
			float2 animUV = inPs.uv@value(uv_diffuse);
			animUV.x = animUV.x + sin(material.userValue[0].y * 2) * 0.001;
			animUV.y = animUV.y + cos(material.userValue[0].y * 2) * 0.001;

			inPs.uv0.xy = animUV;
	}
	@end
*/
@end

@piece( custom_passBuffer )
	float time;
@end

@piece( custom_ps_preLights )
	pixelData.diffuse.xyz *= inPs.diffuse;
@end

@piece( custom_ps_posExecution )
	//For debug purposes
	//outPs_colour0.xyz = float3(inPs.diffuse.xyz);

	float3 fogColour = float3(0.5, 0.89, 1);
	outPs_colour0.xyz = mix(fogColour, outPs_colour0.xyz, inPs.fog);
@end

@piece( custom_VStoPS )
	float3 diffuse;
	float fog;
@end

@piece( custom_vs_posExecution )

	@property( !hlms_shadowcaster || !hlms_shadow_uses_depth_texture || alpha_test || exponential_shadow_maps )
		float4 positionRelativeToCam = mul(worldPos, passBuf.viewProj);
		float distance = length(positionRelativeToCam.xyz);
		float density = 0.003;
		float gradient = 3.5;
		float visibility = exp(-pow(distance * density, gradient));
		visibility = clamp(visibility, 0.0, 1.0);
		outVs.fog = visibility;
	@end

@end

@piece( custom_vs_preExecution )

	@property(packedVoxels)

		const float3 FACES_NORMALS[6] = {
			float3(0, -1,  0),
			float3(0,  1,  0),
			float3(0,  0, -1),
			float3(0,  0,  1),
			float3(1,  0,  0),
			float3(-1, 0,  0),
		};

		const float2 VOXEL_TEX_COORDS[256] = {
			float2(0.03125, 0.03125),
float2(0.09375, 0.03125),
float2(0.15625, 0.03125),
float2(0.21875, 0.03125),
float2(0.28125, 0.03125),
float2(0.34375, 0.03125),
float2(0.40625, 0.03125),
float2(0.46875, 0.03125),
float2(0.53125, 0.03125),
float2(0.59375, 0.03125),
float2(0.65625, 0.03125),
float2(0.71875, 0.03125),
float2(0.78125, 0.03125),
float2(0.84375, 0.03125),
float2(0.90625, 0.03125),
float2(0.96875, 0.03125),
float2(0.03125, 0.09375),
float2(0.09375, 0.09375),
float2(0.15625, 0.09375),
float2(0.21875, 0.09375),
float2(0.28125, 0.09375),
float2(0.34375, 0.09375),
float2(0.40625, 0.09375),
float2(0.46875, 0.09375),
float2(0.53125, 0.09375),
float2(0.59375, 0.09375),
float2(0.65625, 0.09375),
float2(0.71875, 0.09375),
float2(0.78125, 0.09375),
float2(0.84375, 0.09375),
float2(0.90625, 0.09375),
float2(0.96875, 0.09375),
float2(0.03125, 0.15625),
float2(0.09375, 0.15625),
float2(0.15625, 0.15625),
float2(0.21875, 0.15625),
float2(0.28125, 0.15625),
float2(0.34375, 0.15625),
float2(0.40625, 0.15625),
float2(0.46875, 0.15625),
float2(0.53125, 0.15625),
float2(0.59375, 0.15625),
float2(0.65625, 0.15625),
float2(0.71875, 0.15625),
float2(0.78125, 0.15625),
float2(0.84375, 0.15625),
float2(0.90625, 0.15625),
float2(0.96875, 0.15625),
float2(0.03125, 0.21875),
float2(0.09375, 0.21875),
float2(0.15625, 0.21875),
float2(0.21875, 0.21875),
float2(0.28125, 0.21875),
float2(0.34375, 0.21875),
float2(0.40625, 0.21875),
float2(0.46875, 0.21875),
float2(0.53125, 0.21875),
float2(0.59375, 0.21875),
float2(0.65625, 0.21875),
float2(0.71875, 0.21875),
float2(0.78125, 0.21875),
float2(0.84375, 0.21875),
float2(0.90625, 0.21875),
float2(0.96875, 0.21875),
float2(0.03125, 0.28125),
float2(0.09375, 0.28125),
float2(0.15625, 0.28125),
float2(0.21875, 0.28125),
float2(0.28125, 0.28125),
float2(0.34375, 0.28125),
float2(0.40625, 0.28125),
float2(0.46875, 0.28125),
float2(0.53125, 0.28125),
float2(0.59375, 0.28125),
float2(0.65625, 0.28125),
float2(0.71875, 0.28125),
float2(0.78125, 0.28125),
float2(0.84375, 0.28125),
float2(0.90625, 0.28125),
float2(0.96875, 0.28125),
float2(0.03125, 0.34375),
float2(0.09375, 0.34375),
float2(0.15625, 0.34375),
float2(0.21875, 0.34375),
float2(0.28125, 0.34375),
float2(0.34375, 0.34375),
float2(0.40625, 0.34375),
float2(0.46875, 0.34375),
float2(0.53125, 0.34375),
float2(0.59375, 0.34375),
float2(0.65625, 0.34375),
float2(0.71875, 0.34375),
float2(0.78125, 0.34375),
float2(0.84375, 0.34375),
float2(0.90625, 0.34375),
float2(0.96875, 0.34375),
float2(0.03125, 0.40625),
float2(0.09375, 0.40625),
float2(0.15625, 0.40625),
float2(0.21875, 0.40625),
float2(0.28125, 0.40625),
float2(0.34375, 0.40625),
float2(0.40625, 0.40625),
float2(0.46875, 0.40625),
float2(0.53125, 0.40625),
float2(0.59375, 0.40625),
float2(0.65625, 0.40625),
float2(0.71875, 0.40625),
float2(0.78125, 0.40625),
float2(0.84375, 0.40625),
float2(0.90625, 0.40625),
float2(0.96875, 0.40625),
float2(0.03125, 0.46875),
float2(0.09375, 0.46875),
float2(0.15625, 0.46875),
float2(0.21875, 0.46875),
float2(0.28125, 0.46875),
float2(0.34375, 0.46875),
float2(0.40625, 0.46875),
float2(0.46875, 0.46875),
float2(0.53125, 0.46875),
float2(0.59375, 0.46875),
float2(0.65625, 0.46875),
float2(0.71875, 0.46875),
float2(0.78125, 0.46875),
float2(0.84375, 0.46875),
float2(0.90625, 0.46875),
float2(0.96875, 0.46875),
float2(0.03125, 0.53125),
float2(0.09375, 0.53125),
float2(0.15625, 0.53125),
float2(0.21875, 0.53125),
float2(0.28125, 0.53125),
float2(0.34375, 0.53125),
float2(0.40625, 0.53125),
float2(0.46875, 0.53125),
float2(0.53125, 0.53125),
float2(0.59375, 0.53125),
float2(0.65625, 0.53125),
float2(0.71875, 0.53125),
float2(0.78125, 0.53125),
float2(0.84375, 0.53125),
float2(0.90625, 0.53125),
float2(0.96875, 0.53125),
float2(0.03125, 0.59375),
float2(0.09375, 0.59375),
float2(0.15625, 0.59375),
float2(0.21875, 0.59375),
float2(0.28125, 0.59375),
float2(0.34375, 0.59375),
float2(0.40625, 0.59375),
float2(0.46875, 0.59375),
float2(0.53125, 0.59375),
float2(0.59375, 0.59375),
float2(0.65625, 0.59375),
float2(0.71875, 0.59375),
float2(0.78125, 0.59375),
float2(0.84375, 0.59375),
float2(0.90625, 0.59375),
float2(0.96875, 0.59375),
float2(0.03125, 0.65625),
float2(0.09375, 0.65625),
float2(0.15625, 0.65625),
float2(0.21875, 0.65625),
float2(0.28125, 0.65625),
float2(0.34375, 0.65625),
float2(0.40625, 0.65625),
float2(0.46875, 0.65625),
float2(0.53125, 0.65625),
float2(0.59375, 0.65625),
float2(0.65625, 0.65625),
float2(0.71875, 0.65625),
float2(0.78125, 0.65625),
float2(0.84375, 0.65625),
float2(0.90625, 0.65625),
float2(0.96875, 0.65625),
float2(0.03125, 0.71875),
float2(0.09375, 0.71875),
float2(0.15625, 0.71875),
float2(0.21875, 0.71875),
float2(0.28125, 0.71875),
float2(0.34375, 0.71875),
float2(0.40625, 0.71875),
float2(0.46875, 0.71875),
float2(0.53125, 0.71875),
float2(0.59375, 0.71875),
float2(0.65625, 0.71875),
float2(0.71875, 0.71875),
float2(0.78125, 0.71875),
float2(0.84375, 0.71875),
float2(0.90625, 0.71875),
float2(0.96875, 0.71875),
float2(0.03125, 0.78125),
float2(0.09375, 0.78125),
float2(0.15625, 0.78125),
float2(0.21875, 0.78125),
float2(0.28125, 0.78125),
float2(0.34375, 0.78125),
float2(0.40625, 0.78125),
float2(0.46875, 0.78125),
float2(0.53125, 0.78125),
float2(0.59375, 0.78125),
float2(0.65625, 0.78125),
float2(0.71875, 0.78125),
float2(0.78125, 0.78125),
float2(0.84375, 0.78125),
float2(0.90625, 0.78125),
float2(0.96875, 0.78125),
float2(0.03125, 0.84375),
float2(0.09375, 0.84375),
float2(0.15625, 0.84375),
float2(0.21875, 0.84375),
float2(0.28125, 0.84375),
float2(0.34375, 0.84375),
float2(0.40625, 0.84375),
float2(0.46875, 0.84375),
float2(0.53125, 0.84375),
float2(0.59375, 0.84375),
float2(0.65625, 0.84375),
float2(0.71875, 0.84375),
float2(0.78125, 0.84375),
float2(0.84375, 0.84375),
float2(0.90625, 0.84375),
float2(0.96875, 0.84375),
float2(0.03125, 0.90625),
float2(0.09375, 0.90625),
float2(0.15625, 0.90625),
float2(0.21875, 0.90625),
float2(0.28125, 0.90625),
float2(0.34375, 0.90625),
float2(0.40625, 0.90625),
float2(0.46875, 0.90625),
float2(0.53125, 0.90625),
float2(0.59375, 0.90625),
float2(0.65625, 0.90625),
float2(0.71875, 0.90625),
float2(0.78125, 0.90625),
float2(0.84375, 0.90625),
float2(0.90625, 0.90625),
float2(0.96875, 0.90625),
float2(0.03125, 0.96875),
float2(0.09375, 0.96875),
float2(0.15625, 0.96875),
float2(0.21875, 0.96875),
float2(0.28125, 0.96875),
float2(0.34375, 0.96875),
float2(0.40625, 0.96875),
float2(0.46875, 0.96875),
float2(0.53125, 0.96875),
float2(0.59375, 0.96875),
float2(0.65625, 0.96875),
float2(0.71875, 0.96875),
float2(0.78125, 0.96875),
float2(0.84375, 0.96875),
float2(0.90625, 0.96875),
float2(0.96875, 0.96875),
};

		float4 inValues = inVs_vertex;
		@property( syntax == metal )
			uint original = as_type<uint>(inValues.x);
			uint originalSecond = as_type<uint>(inValues.y);
		@else
			uint original = floatBitsToUint(inValues.x);
			uint originalSecond = floatBitsToUint(inValues.y);
		@end

		uint magicNumber = originalSecond & uint(0x1FFFFFFF);
		float3 normVal = float3(0, 0, 0);
		#undef inVs_normal
		#define inVs_normal normVal

		#undef inVs_vertex
		#define inVs_vertex inValues

		uint voxValue = originalSecond & 0xFF;
		float2 testVal = VOXEL_TEX_COORDS[voxValue];
		#undef inVs_uv0
		#define inVs_uv0 testVal

		int pos_x = int(original & uint(0x3FF));
		int pos_y = int((original >> 10) & uint(0x3FF));
		int pos_z = int((original >> 20) & uint(0x3FF));
		@property(offlineVoxels)
			pos_x -= 128;
			pos_y -= 128;
			pos_z -= 128;
		@end

		inValues.x = float(pos_x)-0.5;
		inValues.y = float(pos_y)-0.5;
		inValues.z = float(pos_z)-0.5;
		@property(voxelTerrain)
			inValues.z -= 4.0;
		@end

		uint norm = uint((originalSecond >> 29) & uint(0x3));
		uint ambient = uint((original >> 30) & uint(0x3));

		@property(treeVertices)
			uint voxel = ((originalSecond >> 8) & 0x3);
			float mod = float(voxel) / 3;
			inValues.y += sin(inValues.y*600 + passBuf.time) * 0.05 * mod;
			inValues.z += cos(inValues.z*600 + passBuf.time) * 0.10 * mod;
			inValues.x += sin(inValues.x*600 + passBuf.time) * 0.05 * mod;
		@end

		normVal = FACES_NORMALS[norm];

		//If the renderable does not require pixel shading because it is a shadow caster for instance, these settings won't always be available.
		@property( !hlms_shadowcaster || !hlms_shadow_uses_depth_texture || alpha_test || exponential_shadow_maps )
			float ambientVal = float(ambient)/3;
			outVs.diffuse = float3(ambientVal, ambientVal, ambientVal);
		@end

	@else
		float4 inValues = inVs_vertex;
		#undef inVs_vertex
		#define inVs_vertex inValues

		@property( !hlms_shadowcaster || !hlms_shadow_uses_depth_texture || alpha_test || exponential_shadow_maps )
			outVs.diffuse = float3(1, 1, 1);
		@end

		@property(oceanVertices)
			inVs_vertex.y += sin(inVs_vertex.x*600 + passBuf.time) * 0.25;
			inVs_vertex.y += cos(inVs_vertex.z*600 + passBuf.time) * 0.25;
			inVs_vertex.x += sin(inVs_vertex.x*600 + passBuf.time) * 0.001;
		@end
	@end


@end

