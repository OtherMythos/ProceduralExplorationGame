@piece( custom_ps_preLights )
	//finalColour = float3(1.0, 1.0, 1.0);
	finalColour = finalColour * (inPs.diffuse.xyz * material.userValue[0].x);
@end

@piece( custom_VStoPS )
	float3 diffuse;
@end
@piece( custom_vs_preExecution )
    const float3 FACES_NORMALS[6] = {
        float3(0, -1,  0),
        float3(0,  1,  0),
        float3(0,  0, -1),
        float3(0,  0,  1),
        float3(1,  0,  0),
        float3(-1, 0,  0),
    };

	//outVs.diffuse = input.diffuse;
	//input.normal = float3(0, 0, 0);
	//inVs_normal = float3(0, 0, 0);
	//float test = input.normal.x;

	unsigned int original = as_type<unsigned int>(input.position.x);
	unsigned int originalSecond = as_type<unsigned int>(input.position.y);
	unsigned int magicNumber = as_type<unsigned int>(input.position.z);
	float3 normVal = float3(0, 0, 0);
	#undef inVs_normal
	#define inVs_normal normVal
	if(magicNumber == 0xFF7F7F){
		int pos_x = as_type<int>(original & 0xFF);
		int pos_y = as_type<int>((original >> 8) & 0xFF);
		int pos_z = as_type<int>((original >> 16) & 0xFF);
		input.position.x = float(pos_x);
		input.position.y = float(pos_y);
		input.position.z = float(pos_z);

		unsigned int vox = as_type<unsigned int>(originalSecond & 0xFFFF);
		unsigned int norm = as_type<unsigned int>((originalSecond >> 16) & 0xFF);
		unsigned int ambient = as_type<unsigned int>((originalSecond >> 24) & 0xFF);

		normVal = FACES_NORMALS[norm];

		float ambientVal = (float)ambient/4;
		outVs.diffuse = float3(ambientVal, ambientVal, ambientVal);
	}else{
		outVs.diffuse = float3(1, 1, 1);
	}
@end